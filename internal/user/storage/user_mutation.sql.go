// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user_mutation.sql

package storage

import (
	"context"

	uuid "github.com/gofrs/uuid"
)

const createUser = `-- name: CreateUser :one
insert into "user"."user" (id, name, email, registered_at, settings, contacts)
values ($1, $2, $3, now(), null, null) RETURNING id, name, email, registered_at, settings, contacts
`

type CreateUserParams struct {
	ID    uuid.UUID `db:"id" json:"id"`
	Name  string    `db:"name" json:"name"`
	Email string    `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.RegisteredAt,
		&i.Settings,
		&i.Contacts,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from "user"."user" where id = $1::uuid
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}
