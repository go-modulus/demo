// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package storage

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	uuid "github.com/gofrs/uuid"
)

type PostStatus string

const (
	PostStatusDraft     PostStatus = "draft"
	PostStatusPublished PostStatus = "published"
)

func (e *PostStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostStatus(s)
	case string:
		*e = PostStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PostStatus: %T", src)
	}
	return nil
}

type NullPostStatus struct {
	PostStatus PostStatus `json:"postStatus"`
	Valid      bool       `json:"valid"` // Valid is true if PostStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PostStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostStatus), nil
}

func AllPostStatusValues() []PostStatus {
	return []PostStatus{
		PostStatusDraft,
		PostStatusPublished,
	}
}

type Post struct {
	ID          uuid.UUID    `db:"id" json:"id"`
	Title       string       `db:"title" json:"title"`
	Body        string       `db:"body" json:"body"`
	AuthorID    uuid.UUID    `db:"author_id" json:"authorId"`
	Slug        string       `db:"slug" json:"slug"`
	Status      PostStatus   `db:"status" json:"status"`
	CreatedAt   time.Time    `db:"created_at" json:"createdAt"`
	PublishedAt sql.NullTime `db:"published_at" json:"publishedAt"`
	UpdatedAt   time.Time    `db:"updated_at" json:"updatedAt"`
}
