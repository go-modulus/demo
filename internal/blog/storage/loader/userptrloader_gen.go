// Code generated by github.com/vektah/dataloaden, DO NOT EDIT.

package loader

import (
	"sync"
	"time"

	"boilerplate/internal/user/storage"

	"github.com/google/uuid"
)

// UserPtrLoaderConfig captures the config to create a new UserPtrLoader
type UserPtrLoaderConfig struct {
	// Fetch is a method that provides the data for the loader
	Fetch func(keys []uuid.UUID) ([]*storage.User, []error)

	// Wait is how long wait before sending a batch
	Wait time.Duration

	// MaxBatch will limit the maximum number of keys to send in one batch, 0 = not limit
	MaxBatch int

	// UserPtrLoaderCache adds ability to change the caching strategy
	Cache UserPtrLoaderCache
}

type UserPtrLoaderCache interface {
	Set(key uuid.UUID, value *storage.User)
	Get(key uuid.UUID) (*storage.User, bool)
	Del(key uuid.UUID)
}

type UserPtrLoaderDefaultCache struct {
	cache map[uuid.UUID]*storage.User
}

func NewUserPtrLoaderDefaultCache() *UserPtrLoaderDefaultCache {
	return &UserPtrLoaderDefaultCache{cache: make(map[uuid.UUID]*storage.User)}
}

func (d *UserPtrLoaderDefaultCache) Set(key uuid.UUID, value *storage.User) {
	d.cache[key] = value
}

func (d *UserPtrLoaderDefaultCache) Get(key uuid.UUID) (*storage.User, bool) {
	it, ok := d.cache[key]
	return it, ok
}

func (d *UserPtrLoaderDefaultCache) Del(key uuid.UUID) {
	delete(d.cache, key)
}

type UserPtrLoaderNullCache struct {
}

func (d *UserPtrLoaderNullCache) Set(key uuid.UUID, value *storage.User) {
}

func (d *UserPtrLoaderNullCache) Get(key uuid.UUID) (*storage.User, bool) {
	return nil, false
}

func (d *UserPtrLoaderNullCache) Del(key uuid.UUID) {
}

// NewUserPtrLoader creates a new UserPtrLoader given a fetch, wait, and maxBatch
func NewUserPtrLoader(config UserPtrLoaderConfig) *UserPtrLoader {
	cache := config.Cache
	if cache == nil {
		cache = NewUserPtrLoaderDefaultCache()
	}
	return &UserPtrLoader{
		fetch:    config.Fetch,
		wait:     config.Wait,
		maxBatch: config.MaxBatch,
		cache:    cache,
	}
}

// UserPtrLoader batches and caches requests
type UserPtrLoader struct {
	// this method provides the data for the loader
	fetch func(keys []uuid.UUID) ([]*storage.User, []error)

	// how long to done before sending a batch
	wait time.Duration

	// this will limit the maximum number of keys to send in one batch, 0 = no limit
	maxBatch int

	// INTERNAL

	// lazily created cache
	cache UserPtrLoaderCache

	// the current batch. keys will continue to be collected until timeout is hit,
	// then everything will be sent to the fetch method and out to the listeners
	batch *userPtrLoaderBatch

	// mutex to prevent races
	mu sync.Mutex
}

type userPtrLoaderBatch struct {
	keys    []uuid.UUID
	data    []*storage.User
	error   []error
	closing bool
	done    chan struct{}
}

// Load a User by key, batching and caching will be applied automatically
func (l *UserPtrLoader) Load(key uuid.UUID) (*storage.User, error) {
	return l.LoadThunk(key)()
}

// LoadThunk returns a function that when called will block waiting for a User.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *UserPtrLoader) LoadThunk(key uuid.UUID) func() (*storage.User, error) {
	l.mu.Lock()
	if it, ok := l.getCache().Get(key); ok {
		l.mu.Unlock()
		return func() (*storage.User, error) {
			return it, nil
		}
	}
	if l.batch == nil {
		l.batch = &userPtrLoaderBatch{done: make(chan struct{})}
	}
	batch := l.batch
	pos := batch.keyIndex(l, key)
	l.mu.Unlock()

	return func() (*storage.User, error) {
		<-batch.done

		var data *storage.User
		if pos < len(batch.data) {
			data = batch.data[pos]
		}

		var err error
		// its convenient to be able to return a single error for everything
		if len(batch.error) == 1 {
			err = batch.error[0]
		} else if batch.error != nil {
			err = batch.error[pos]
		}

		if err == nil {
			l.mu.Lock()
			l.unsafeSet(key, data)
			l.mu.Unlock()
		}

		return data, err
	}
}

// LoadAll fetches many keys at once. It will be broken into appropriate sized
// sub batches depending on how the loader is configured
func (l *UserPtrLoader) LoadAll(keys []uuid.UUID) ([]*storage.User, []error) {
	results := make([]func() (*storage.User, error), len(keys))

	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}

	users := make([]*storage.User, len(keys))
	errors := make([]error, len(keys))
	for i, thunk := range results {
		users[i], errors[i] = thunk()
	}
	return users, errors
}

// LoadAllThunk returns a function that when called will block waiting for a Users.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *UserPtrLoader) LoadAllThunk(keys []uuid.UUID) func() ([]*storage.User, []error) {
	results := make([]func() (*storage.User, error), len(keys))
	for i, key := range keys {
		results[i] = l.LoadThunk(key)
	}
	return func() ([]*storage.User, []error) {
		users := make([]*storage.User, len(keys))
		errors := make([]error, len(keys))
		for i, thunk := range results {
			users[i], errors[i] = thunk()
		}
		return users, errors
	}
}

// Prime the cache with the provided key and value. If the key already exists, no change is made
// and false is returned.
// (To forcefully prime the cache, clear the key first with loader.clear(key).prime(key, value).)
func (l *UserPtrLoader) Prime(key uuid.UUID, value *storage.User) bool {
	l.mu.Lock()
	var found bool
	if _, found = l.getCache().Get(key); !found {
		// make a copy when writing to the cache, its easy to pass a pointer in from a loop var
		// and end up with the whole cache pointing to the same value.
		cpy := *value
		l.unsafeSet(key, &cpy)
	}
	l.mu.Unlock()
	return !found
}

// Clear the value at key from the cache, if it exists
func (l *UserPtrLoader) Clear(key uuid.UUID) {
	l.mu.Lock()
	l.getCache().Del(key)
	l.mu.Unlock()
}

func (l *UserPtrLoader) unsafeSet(key uuid.UUID, value *storage.User) {
	l.getCache().Set(key, value)
}

// getCache returns cache object or initializes it
func (l *UserPtrLoader) getCache() UserPtrLoaderCache {
	if l.cache == nil {
		l.cache = NewUserPtrLoaderDefaultCache()
	}
	return l.cache
}

// keyIndex will return the location of the key in the batch, if its not found
// it will add the key to the batch
func (b *userPtrLoaderBatch) keyIndex(l *UserPtrLoader, key uuid.UUID) int {
	for i, existingKey := range b.keys {
		if key == existingKey {
			return i
		}
	}

	pos := len(b.keys)
	b.keys = append(b.keys, key)
	if pos == 0 {
		go b.startTimer(l)
	}

	if l.maxBatch != 0 && pos >= l.maxBatch-1 {
		if !b.closing {
			b.closing = true
			l.batch = nil
			go b.end(l)
		}
	}

	return pos
}

func (b *userPtrLoaderBatch) startTimer(l *UserPtrLoader) {
	time.Sleep(l.wait)
	l.mu.Lock()

	// we must have hit a batch limit and are already finalizing this batch
	if b.closing {
		l.mu.Unlock()
		return
	}

	l.batch = nil
	l.mu.Unlock()

	b.end(l)
}

func (b *userPtrLoaderBatch) end(l *UserPtrLoader) {
	b.data, b.error = l.fetch(b.keys)
	close(b.done)
}
