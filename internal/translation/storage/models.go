// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package storage

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type Locale string

const (
	LocaleEn Locale = "en"
	LocaleID Locale = "id"
)

func (e *Locale) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Locale(s)
	case string:
		*e = Locale(s)
	default:
		return fmt.Errorf("unsupported scan type for Locale: %T", src)
	}
	return nil
}

type NullLocale struct {
	Locale Locale `json:"locale"`
	Valid  bool   `json:"valid"` // Valid is true if Locale is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLocale) Scan(value interface{}) error {
	if value == nil {
		ns.Locale, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Locale.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLocale) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Locale), nil
}

func AllLocaleValues() []Locale {
	return []Locale{
		LocaleEn,
		LocaleID,
	}
}

type Path string

const (
	PathAdminconfigvalue                 Path = "admin.config.value"
	PathAdmincollectionInfodescription   Path = "admin.collection_info.description"
	PathAdmincollectionInfoutility       Path = "admin.collection_info.utility"
	PathAdmincollectionInfoaccessUtility Path = "admin.collection_info.access_utility"
	PathAdmincollectionInfoimage1        Path = "admin.collection_info.image1"
	PathAdmincollectionInfoimage2        Path = "admin.collection_info.image2"
	PathAdmincollectionInfoimage3        Path = "admin.collection_info.image3"
)

func (e *Path) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Path(s)
	case string:
		*e = Path(s)
	default:
		return fmt.Errorf("unsupported scan type for Path: %T", src)
	}
	return nil
}

type NullPath struct {
	Path  Path `json:"path"`
	Valid bool `json:"valid"` // Valid is true if Path is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPath) Scan(value interface{}) error {
	if value == nil {
		ns.Path, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Path.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPath) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Path), nil
}

func AllPathValues() []Path {
	return []Path{
		PathAdminconfigvalue,
		PathAdmincollectionInfodescription,
		PathAdmincollectionInfoutility,
		PathAdmincollectionInfoaccessUtility,
		PathAdmincollectionInfoimage1,
		PathAdmincollectionInfoimage2,
		PathAdmincollectionInfoimage3,
	}
}

type Translation struct {
	Key       string    `db:"key" json:"key"`
	Path      Path      `db:"path" json:"path"`
	Locale    Locale    `db:"locale" json:"locale"`
	Value     string    `db:"value" json:"value"`
	CreatedAt time.Time `db:"created_at" json:"createdAt"`
	UpdatedAt time.Time `db:"updated_at" json:"updatedAt"`
	PseudoID  string    `db:"pseudo_id" json:"pseudoId"`
}
